from typing import Dict

from aiogram.dispatcher.filters import Command
from aiogram.types import Message, ParseMode
from aiogram_dialog import DialogManager, StartMode, Dialog, Window, ChatEvent
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Keyboard
from aiogram_dialog.widgets.text import Const, Jinja, Multi
from aiogram_dialog.widgets.when import Whenable

from filters import IsRegistered
from states.menu import MenuSG
from .getters import getter_start_data
from loader import dp, registry

async def on_cancel(call: ChatEvent, button: Button, manager: DialogManager):
    await manager.done()

menu_text = Jinja("""
{% if admin_id %}
{% if count_roles > 1 %}
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
{% endif %}
–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ:
/createLesson
{{ ' ' }}
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è:
/readLesson
{{ ' ' }}
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ:
/editLesson
{{ ' ' }}
–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:
/deleteLesson
{% endif %}
{% if teacher_id %}
{% if count_roles > 1 %}
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
{% endif %}
{% endif %}
{% if curator_id %}
{% if count_roles > 1 %}
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ö—É—Ä–∞—Ç–æ—Ä–∞
{% endif %}
{% endif %}
{% if parent_id %}
{% if count_roles > 1 %}
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –†–æ–¥–∏—Ç–µ–ª—è
{% endif %}
{% endif %}
{% if student_id %}
{% if count_roles > 1 %}
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞
{% endif %}
{% endif %}

""")

def is_admin(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("admin_id"):
        return True

def is_teacher(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("teacher_id"):
        return True

def is_curator(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("curator_id"):
        return True

def is_parent(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("parent_id"):
        return True

def is_student(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("student_id"):
        return True

def is_multi_role(data: Dict, widget: Whenable, manager: DialogManager):
    if data.get("count_roles") > 1:
        return True


dialog = Dialog(
    Window(
        Const("–ú–µ–Ω—é:"),
        Multi(
            Const("\n*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n", when=is_multi_role),
            Const("üßÆ –ó–∞–Ω—è—Ç–∏–µ:\n"),
            Const("_1. –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ:\n/addLesson_"),
            Const("_2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è:\n/getLessons_"),
            Const("_3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ:\neditLesson_"),
            Const("_4. –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:\n/deleteLesson_"),
            Const("\nüìö –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞:\n"),
            Const("_1. –°–æ–∑–¥–∞—Ç—å –î–ó:\naddHomework_"),
            Const("_2. –£–¥–∞–ª–∏—Ç—å –î–ó:\ndeleteHomework_"),
            Const("\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã:\n"),
            Const("_1. –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —É—á–µ–Ω–∏–∫—É:\n/bound_"),
            Const("_2. –û—Ç–≤—è–∑–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –æ—Ç —É—á–µ–Ω–∏–∫–∞:\n/unbound_"),
            Const("_3. –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É:\n/inGroup_"),
            Const("_4. –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—É:\n/outGroup_"),
            when=is_admin
        ),
        Multi(
            Const("\n*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*\n", when=is_multi_role),
            Const("üßÆ –ó–∞–Ω—è—Ç–∏–µ:\n"),
            Const("_1. –ù–∞—á–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ: /startLesson_"),
            Const("_2. –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: /cancelLesson_"),
            Const("_3. –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ: /endLesson_"),
            when=is_teacher
        ),
        Multi(
            Const("\n*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ö—É—Ä–∞—Ç–æ—Ä–∞*\n", when=is_multi_role),
            when=is_curator
        ),
        Multi(
            Const("\n*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –†–æ–¥–∏—Ç–µ–ª—è*\n", when=is_multi_role),
            when=is_parent
        ),
        Multi(
            Const("\n*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞*\n", when=is_multi_role),
            when=is_student
        ),
        parse_mode=ParseMode.MARKDOWN,
        state=MenuSG.menu,
        getter=getter_start_data
    ),
)

@dp.message_handler(Command(commands="menu"), IsRegistered())
async def menu(message: Message, dialog_manager: DialogManager):
    data = await getter_start_data(dialog_manager)
    await dialog_manager.start(MenuSG.menu, data=data, mode=StartMode.RESET_STACK)
    await dialog_manager.done()

registry.register(dialog)