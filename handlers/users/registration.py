import bcrypt
import re

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery, Message, ContentTypes

from data import config
from filters import IsUnregistered
from keyboards.inline.keyboard_generators import generate_inline_keyboard
from keyboards.inline.register_keyboard import role_keyboard
from loader import dp, bot
from states.registration import Registration
from utils.db_api.database import db
from utils.db_api.models import User, Student, Parent, Curator, Teacher
from utils.useful_functions import answer_and_delete


@dp.message_handler(Text(equals=["–û—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"]),
                    state=Registration)
async def cancel_registration(message: Message, state: FSMContext):
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    await state.finish()
    await bot.edit_message_text(
        message_id=call_id,
        chat_id=message.from_user.id,
        text=f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
             f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
        reply_markup=generate_inline_keyboard([
            {"text": "üöÄ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "callback_data": "start_registration"}
        ])
    )
    await message.delete()


@dp.callback_query_handler(text="cancel_registration", state=Registration)
async def cancel_registration(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(
        f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
        reply_markup=generate_inline_keyboard([
            {"text": "üöÄ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "callback_data": "start_registration"}
        ])
    )


@dp.callback_query_handler(IsUnregistered(), text="start_registration")
async def wait_first_name(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        f"üî•–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º...\n\n"
        f"–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 2Ô∏è‚É£ –º–∏–Ω—É—Ç.\n\n"
        f"–ò—Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –∏–º—è)",
        reply_markup=generate_inline_keyboard([
            {"text": "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "callback_data": "cancel_registration"}
        ])
    )
    await Registration.wait_first_name.set()
    call_registration_id = call.message.message_id
    await state.update_data(call_registration_id=call_registration_id)
    await call.answer()


@dp.callback_query_handler(text="to_wait_first_name", state=Registration)
async def to_wait_first_name(call: CallbackQuery):
    await Registration.wait_first_name.set()
    await call.message.edit_text(
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
        reply_markup=generate_inline_keyboard([
            {"text": "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "callback_data": "cancel_registration"}
        ])
    )
    await call.answer()


@dp.message_handler(state=Registration.wait_first_name)
async def check_first_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    if re.match("^[–∞-—è–ê-–Ø*]{1,23}$", message.text):
        await state.update_data(first_name=message.text.capitalize())
        await Registration.wait_last_name.set()
        await bot.edit_message_text(
            message_id=call_id,
            chat_id=message.from_user.id,
            text=f"–û—Ç–ª–∏—á–Ω–æ, {message.text.capitalize()}!üôÇ\n"
                 f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é",
            reply_markup=generate_inline_keyboard([
                {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_first_name"}
            ])
        )
        await message.delete()
    else:
        await answer_and_delete(
            message=message,
            text=f"–ò–º—è –¥–æ–ª–∂–Ω–æ —è–≤–ª—è—Ç—å—Å—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º —Ö–æ—Ç—è –±—ã –∏–∑ –¥–≤—É—Ö –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!",
            delay=6
        )


@dp.callback_query_handler(text="to_wait_last_name", state=Registration)
async def to_wait_last_name(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await Registration.wait_last_name.set()
    await call.message.edit_text(
        text=f"{user_data['first_name']}, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_first_name"}
        ])
    )
    await call.answer()


@dp.message_handler(state=Registration.wait_last_name)
async def check_last_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    call_id = user_data["call_registration_id"]
    if re.match("^[–∞-—è–ê-–Ø*]{1,23}$", message.text):
        await state.update_data(last_name=message.text.capitalize())
        user_data = await state.get_data()
        await Registration.wait_role.set()
        await bot.edit_message_text(
            message_id=call_id,
            chat_id=message.from_user.id,
            text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è,\n{user_data['first_name']} {user_data['last_name']} ü§ù\n"
                 f"–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤–∞—à–µ–π —Ä–æ–ª—å—é:",
            reply_markup=role_keyboard()
        )
        await message.delete()
    else:
        await answer_and_delete(
            message=message,
            text=f"–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —è–≤–ª—è—Ç—å—Å—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º —Ö–æ—Ç—è –±—ã –∏–∑ –¥–≤—É—Ö –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é!",
            delay=6
        )


@dp.callback_query_handler(text="to_wait_role", state=Registration)
async def to_wait_role(call: CallbackQuery):
    await Registration.wait_role.set()
    await call.message.edit_text(
        text=f"–ò—Ç–∞–∫, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n"
             f"–í–∞—à–∞ —Ä–æ–ª—å:",
        reply_markup=role_keyboard()
    )
    await call.answer()


@dp.callback_query_handler(text="student", state=Registration.wait_role)
async def role_student(call: CallbackQuery, state: FSMContext):
    await state.update_data(role=call.data)
    await call.message.edit_text(
        text=f"–í–æ—Ç –±—ã –∏ –º–Ω–µ —Å–µ–π—á–∞—Å –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —à–∫–æ–ª—Éüéí\n"
             f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é —Å—Ä–∞–∑—É, –º—ã –Ω–µ –ª—é–±–∏–º —Ö–∞–ª—è–≤—â–∏–∫–æ–≤! –¢–∞–∫ —á—Ç–æ —Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ)\n"
             f"–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Email",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_role"}
        ])
    )
    await Registration.wait_email.set()
    await call.answer()


@dp.callback_query_handler(text="parent", state=Registration.wait_role)
async def role_parent(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(role=call.data)
    await call.message.edit_text(
        text=f"–ó–∞–ø–∏—Å–∞–ª, —á—Ç–æ –≤—ã ‚Äî –†–æ–¥–∏—Ç–µ–ª—åüëå\n"
             f"–ë—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã, –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ –æ–∫–∞–∑–∞–ª—Å—è –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö)\n"
             f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Email",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_role"}
        ])
    )
    await Registration.wait_email.set()


@dp.callback_query_handler(text="teacher", state=Registration.wait_role)
@dp.callback_query_handler(text="curator", state=Registration.wait_role)
async def role_teacher_curator(call: CallbackQuery, state: FSMContext):
    await state.update_data(role=call.data)
    await call.message.edit_text(
        text=f"–ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏—Ö ü§úü§õ\n"
             f"–ß—Ç–æ–±—ã –ø—Ä–¥–æ–ª–∂–∏—Ç—å, –Ω—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.",
        reply_markup=generate_inline_keyboard([
            {"text": "üòà–í–≤–µ—Å—Ç–∏ –∫–æ–¥!", "callback_data": "have_secret_code"},
            {"text": "ü§∑‚Äç‚ôÇÔ∏è–ö–∞–∫–æ–π –∫–æ–¥...?", "callback_data": "have_no_secret_code"}
        ])
    )
    await call.answer()


@dp.callback_query_handler(text="have_secret_code", state=Registration.wait_role)
@dp.callback_query_handler(text="to_wait_secret_code", state=Registration)
async def wait_secret_code(call: CallbackQuery):
    await Registration.wait_secret_code.set()
    await call.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –∑–Ω–∞—éüò¨", "callback_data": "to_wait_role"}
        ])
    )
    await call.answer()


@dp.callback_query_handler(text="have_no_secret_code", state=Registration)
async def wait_secret_code(call: CallbackQuery):
    await call.message.edit_text(
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ï—Å–ª–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –∑–¥–µ—Å—å –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å!",
        reply_markup=generate_inline_keyboard([
            {"text": "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å", "callback_data": "to_wait_role"}
        ])
    )
    await call.answer()


@dp.message_handler(state=Registration.wait_secret_code)
async def check_secret_code(message: Message, state: FSMContext):
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    if message.text == config.SECRET_CODE:
        await bot.edit_message_text(
            message_id=call_id,
            chat_id=message.from_user.id,
            text=f"–í—Å–µ —á–µ—Ç–∫–æ. –¢–∞–Ω—Ü—É–µ–ºüíÉüíÉüíÉ\n"
                 f"–ò –≤–≤–æ–¥–∏–º Email:",
            reply_markup=generate_inline_keyboard([
                {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_role"}
            ])
        )
        await Registration.wait_email.set()
        await message.delete()
    else:
        await message.answer(
            f"–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æüíÄ\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤—Å–µ—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Å–Ω–æ–≤–∞.\n–ï—Å–ª–∏ –≤—ã –∑–∞–±—Ä–µ–ª–∏ —Å—é–¥–∞ –∏–∑ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.",
            reply_markup=generate_inline_keyboard([
                {"text": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "callback_data": "to_wait_secret_code"},
                {"text": "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å", "callback_data": "to_wait_role"}
            ])
        )


@dp.callback_query_handler(text="to_wait_email", state=Registration)
async def to_wait_email(call: CallbackQuery):
    await Registration.wait_email.set()
    await call.message.edit_text(
        f"–î–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥–µ–º Email –µ—â–µ —Ä–∞–∑üòÉ",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_role"}
        ])
    )
    await call.answer()


@dp.message_handler(state=Registration.wait_email)
async def check_email(message: Message, state: FSMContext):
    await Registration.wait_email.set()
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    if re.match("^[-\w\.]+@([-\w]+\.)+[-\w]{2,4}$", message.text):
        email_in_db = await db["users-permissions_user"].find_one({"email": message.text})
        if not email_in_db:
            await state.update_data(email=message.text.lower())
            await bot.edit_message_text(
                message_id=call_id,
                chat_id=message.from_user.id,
                text=f"–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ.\n"
                     f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n",
                reply_markup=generate_inline_keyboard([
                    {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_email"}
                ])
            )
            await Registration.wait_password.set()
            await message.delete()

        else:
            await answer_and_delete(
                message=message,
                text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
    else:
        await answer_and_delete(
            message=message,
            text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Email"
        )


@dp.callback_query_handler(text="to_wait_password", state=Registration)
async def to_wait_password(call: CallbackQuery):
    await Registration.wait_password.set()
    await call.message.edit_text(
        f"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—åüòÉ",
        reply_markup=generate_inline_keyboard([
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_email"}
        ])
    )
    await call.answer()


@dp.message_handler(state=Registration.wait_password)
async def check_password(message: Message, state: FSMContext):
    await Registration.wait_password.set()
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    if re.match("(?=.*[0-9])(?=.*[a-zA-Z])[0-9a-zA-Z!@#$%^&*]{6,}", message.text):
        await state.update_data(password=message.text)
        await bot.edit_message_text(
            message_id=call_id,
            chat_id=message.from_user.id,
            text=f"–ò, –¥–ª—è –Ω–∞–∂–µ–¥–Ω–æ—Å—Ç–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—åüòâ",
            reply_markup=generate_inline_keyboard([
                {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "callback_data": "to_wait_password"}
            ])
        )
        await Registration.wait_confirm_password.set()
        await message.delete()
    else:
        await answer_and_delete(
            message=message,
            text=f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n"
                 f"- –∏–º–µ—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤;\n"
                 f"- –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã;\n"
                 f"- –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.",
            delay=6
        )


@dp.message_handler(state=Registration.wait_confirm_password)
async def check_confirm_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    call_id = user_data["call_registration_id"]
    if not message.text == user_data["password"]:
        await answer_and_delete(
            message=message,
            text=f"–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n"
                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
    await Registration.wait_confirm_registration.set()
    role = await db["users-permissions_role"].find_one({"type": user_data["role"]})
    await bot.edit_message_text(
        message_id=call_id,
        chat_id=message.from_user.id,
        text=f"–ü–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
             f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
             f"*–í–∞—Å –∑–æ–≤—É—Ç:* {user_data['last_name']} {user_data['first_name']}\n"
             f"*–í–∞—à–∞ —Ä–æ–ª—å:* {role['name']}\n"
             f"*–í–∞—à Email:* {user_data['email']}\n"
             f"*–í–∞—à –ø–∞—Ä–æ–ª—å:* {user_data['password']}\n",
        parse_mode="Markdown",
        reply_markup=generate_inline_keyboard([
            {"text": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!", "callback_data": "confirm_registration"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "to_wait_password"},
            {"text": "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "callback_data": "cancel_registration"}
        ])
    )
    await message.delete()


@dp.callback_query_handler(text="confirm_registration", state=Registration.wait_confirm_registration)
async def confirm_registration(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    role = await db["users-permissions_role"].find_one({"type": user_data["role"]})
    count_users = await db["users-permissions_user"].count_documents({})
    current_value = count_users + 1
    username = f"u_{call.from_user.id}"
    encoded_password = user_data["password"].encode("utf-8")
    hashed_password = bcrypt.hashpw(encoded_password, bcrypt.gensalt(10, b'2a'))
    if hashed_password:
        new_user = User(
            full_name=f"{user_data['last_name']} {user_data['first_name']}",
            first_name=f"{user_data['first_name']}",
            last_name=f"{user_data['last_name']}",
            email=user_data['email'],
            username=username,
            password=hashed_password,
            telegram_id=call.from_user.id,
            role=role["_id"],
            all_roles=[role["_id"]],
            confirmed=True,
            blocked=False,
            provider="local"
        )
        write_user = await new_user.commit()
        if write_user.acknowledged:
            if role["type"] == "student":
                new_student = Student(
                    full_name=f"{user_data['last_name']} {user_data['first_name']}",
                    telegram_id=call.from_user.id,
                    account=write_user.inserted_id
                )
                write_student = await new_student.commit()
                if write_student.acknowledged:
                    new_user.student = write_student.inserted_id
                    await new_user.commit()
                    await call.message.edit_text(text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_data['first_name']}!üéâ\n"
                                                      f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüëè")
                    await state.finish()
                    await call.answer()
            if role["type"] == "parent":
                new_parent = Parent(
                    full_name=f"{user_data['last_name']} {user_data['first_name']}",
                    telegram_id=call.from_user.id,
                    account=write_user.inserted_id
                )
                write_parent = await new_parent.commit()
                if write_parent.acknowledged:
                    new_user.parent = write_parent.inserted_id
                    await new_user.commit()
                    await call.message.edit_text(text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_data['first_name']}!üéâ\n"
                                                      f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüëè")
                    await state.finish()
                    await call.answer()
            if role["type"] == "curator":
                new_curator = Curator(
                    full_name=f"{user_data['last_name']} {user_data['first_name']}",
                    telegram_id=call.from_user.id,
                    account=write_user.inserted_id
                )
                write_curator = await new_curator.commit()
                if write_curator.acknowledged:
                    new_user.curator = write_curator.inserted_id
                    await new_user.commit()
                    await call.message.edit_text(text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_data['first_name']}!üéâ\n"
                                                      f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüëè")
                    await state.finish()
                    await call.answer()
            if role["type"] == "teacher":
                new_teacher = Teacher(
                    full_name=f"{user_data['last_name']} {user_data['first_name']}",
                    telegram_id=call.from_user.id,
                    account=write_user.inserted_id
                )
                write_teacher = await new_teacher.commit()
                if write_teacher.acknowledged:
                    new_user.teacher = write_teacher.inserted_id
                    await new_user.commit()
                    await call.message.edit_text(text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_data['first_name']}!üéâ\n"
                                                       f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüëè")
                    await state.finish()
                    await call.answer()


@dp.message_handler(state=Registration, content_types=ContentTypes.ANY)
async def invalid_text(message: Message):
    await answer_and_delete(message=message, text=f"–Ø –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é...")
